"""
–î–∏–Ω–∞–º—ñ—á–Ω–µ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è AI –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ API
–î–æ–∑–≤–æ–ª—è—î –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –º–æ–¥–µ–ª—å –ë–ï–ó –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞
"""

from typing import Optional
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
_current_provider = "claude"  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
_provider_history = []

def get_current_provider() -> str:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –º–æ–¥–µ–ª—å"""
    return _current_provider

def set_current_provider(provider: str) -> dict:
    """
    –ó–º—ñ–Ω–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –º–æ–¥–µ–ª—å
    
    Args:
        provider: "claude", "o3", "gemini", "grok"
    
    Returns:
        dict –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    """
    global _current_provider, _provider_history
    
    valid_providers = ["claude", "o3", "gemini", "grok"]
    
    if provider not in valid_providers:
        return {
            "success": False,
            "error": f"Invalid provider. Valid: {valid_providers}"
        }
    
    old_provider = _current_provider
    _current_provider = provider
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é
    _provider_history.append({
        "from": old_provider,
        "to": provider,
        "timestamp": datetime.utcnow().isoformat()
    })
    
    logger.info(f"üîÑ AI Provider changed: {old_provider} ‚Üí {provider}")
    
    return {
        "success": True,
        "old_provider": old_provider,
        "new_provider": provider,
        "message": f"Successfully switched from {old_provider} to {provider}"
    }

def get_provider_history() -> list:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –∑–º—ñ–Ω –º–æ–¥–µ–ª–µ–π"""
    return _provider_history

def reset_provider_history():
    """–û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é"""
    global _provider_history
    _provider_history = []
