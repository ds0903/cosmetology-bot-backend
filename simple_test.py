"""
–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–¥–Ω–æ—ó –º–æ–¥–µ–ª—ñ
–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: python simple_test.py <provider> <message>
–ü—Ä–∏–∫–ª–∞–¥: python simple_test.py claude "–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Å–ø—Ä–∞–≤–∏?"
"""

import asyncio
import sys
from dotenv import load_dotenv

load_dotenv()

from app.services.multi_ai_service import MultiAIService


async def simple_test(provider: str, message: str):
    """–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç –æ–¥–Ω—ñ—î—ó –º–æ–¥–µ–ª—ñ"""
    
    service = MultiAIService()
    
    print(f"\n{'='*60}")
    print(f"ü§ñ –¢–µ—Å—Ç—É—î–º–æ: {provider.upper()}")
    print(f"üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message}")
    print(f"{'='*60}\n")
    
    try:
        result = await service.send_message(
            provider=provider,
            system_prompt="You are a helpful assistant.",
            user_message=message,
            max_tokens=500
        )
        
        print(f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–æ!\n")
        print(f"üìù –ú–æ–¥–µ–ª—å: {result['model']}")
        print(f"üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å:\n{'-'*60}")
        print(result['response'])
        print(f"{'-'*60}\n")
        print(f"üìä –¢–æ–∫–µ–Ω–∏: {result.get('tokens_used', {})}")
        print(f"üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: ${result.get('cost_estimate', 0):.6f}")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
        sys.exit(1)


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("""
–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
  python simple_test.py <provider> [message]

–ü—Ä–æ–≤–∞–π–¥–µ—Ä–∏:
  claude    - Anthropic Claude Sonnet 4.5
  gpt-o3    - OpenAI GPT o3
  gemini    - Google Gemini 2.5 Pro
  grok      - xAI Grok 3

–ü—Ä–∏–∫–ª–∞–¥–∏:
  python simple_test.py claude "–ü—Ä–∏–≤—ñ—Ç!"
  python simple_test.py gpt-o3 "What is 2+2?"
  python simple_test.py gemini "–†–æ–∑–∫–∞–∂–∏ –ø—Ä–æ –∫–≤–∞–Ω—Ç–æ–≤—ñ –∫–æ–º–ø'—é—Ç–µ—Ä–∏"
        """)
        sys.exit(1)
    
    provider = sys.argv[1]
    message = sys.argv[2] if len(sys.argv) > 2 else "Hello! How are you?"
    
    if provider not in ["claude", "gpt-o3", "gemini", "grok"]:
        print(f"‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider}")
        print("–î–æ—Å—Ç—É–ø–Ω—ñ: claude, gpt-o3, gemini, grok")
        sys.exit(1)
    
    asyncio.run(simple_test(provider, message))
