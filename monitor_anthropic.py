"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ API Anthropic.
–ó–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –æ–∫—Ä–µ–º–æ –≤—ñ–¥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞.

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
    python monitor_anthropic.py           # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
    python monitor_anthropic.py errors    # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–º–∏–ª–∫–∏ –∑ –±–∞–∑–∏
"""

import anthropic
import time
from datetime import datetime
import os
import sqlite3
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∑ .env —Ñ–∞–π–ª—É
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
API_KEY = os.getenv("ANTHROPIC_API_KEY", "your-api-key-here")
MODELS = [
    "claude-sonnet-4-20250514",      # Claude 4.0 Sonnet
    "claude-opus-4-20250514",        # Claude 4.1 Opus
    "claude-sonnet-4-5-20250929"     # Claude 4.5 Sonnet
]
INTERVAL = 600  # 10 —Ö–≤–∏–ª–∏–Ω
DB_FILE = Path(__file__).parent / "monitoring.db"


def init_db():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è"""
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS logs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            timestamp TEXT NOT NULL,
            model TEXT NOT NULL,
            status_code INTEGER,
            response_time REAL,
            request_body TEXT,
            response_body TEXT,
            error_message TEXT
        )
    ''')
    conn.commit()
    conn.close()
    print(f"‚úì –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö {DB_FILE} –≥–æ—Ç–æ–≤–∞\n")


def save_to_db(timestamp, model, status_code, response_time, request_body, response_body, error_message):
    """–ó–∞–ø–∏—Å –ª–æ–≥—ñ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö"""
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('''
        INSERT INTO logs (timestamp, model, status_code, response_time, request_body, response_body, error_message)
        VALUES (?, ?, ?, ?, ?, ?, ?)
    ''', (timestamp, model, status_code, response_time, request_body, response_body, error_message))
    conn.commit()
    conn.close()


def send_message(model):
    """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –º–æ–¥–µ–ª—å"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    request_body = "–ø—Ä–∏–≤—ñ—Ç"
    response_body = None
    error_message = None
    status_code = None
    
    try:
        client = anthropic.Anthropic(api_key=API_KEY)
        start = time.time()
        
        response = client.messages.create(
            model=model,
            max_tokens=10,
            messages=[{"role": "user", "content": request_body}]
        )
        
        elapsed = time.time() - start
        status_code = 200
        response_body = response.content[0].text if response.content else ""
        
        print(f"‚úì [{timestamp}] {model}: 200 OK ({elapsed:.2f}s)")
        
    except anthropic.RateLimitError as e:
        elapsed = time.time() - start
        status_code = 429
        error_message = f"Rate Limit: {str(e)}"
        print(f"‚úó [{timestamp}] {model}: {status_code} - {error_message} ({elapsed:.2f}s)")
        
    except anthropic.APIError as e:
        elapsed = time.time() - start
        status_code = getattr(e, 'status_code', 500)
        error_message = str(e)
        
        if "overload" in error_message.lower():
            print(f"‚ö†Ô∏è  [{timestamp}] {model}: {status_code} - OVERLOAD ({elapsed:.2f}s)")
        else:
            print(f"‚úó [{timestamp}] {model}: {status_code} - {error_message} ({elapsed:.2f}s)")
    
    except Exception as e:
        elapsed = time.time() - start
        status_code = 0
        error_message = f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}"
        print(f"‚úó [{timestamp}] {model}: ERROR - {error_message} ({elapsed:.2f}s)")
    
    # –ó–∞–ø–∏—Å—É—î–º–æ –≤ –±–∞–∑—É —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Å—Ç–∞—Ç—É—Å != 200
    if status_code != 200:
        save_to_db(
            timestamp=timestamp,
            model=model,
            status_code=status_code,
            response_time=round(elapsed, 3),
            request_body=request_body,
            response_body=response_body,
            error_message=error_message
        )
        print(f"  üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ë–î")


def show_errors():
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –ø–æ–º–∏–ª–∫–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    if not DB_FILE.exists():
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞. –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥.")
        return
    
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('SELECT COUNT(*) FROM logs')
    total = c.fetchone()[0]
    
    c.execute('SELECT * FROM logs ORDER BY timestamp DESC LIMIT 50')
    rows = c.fetchall()
    conn.close()
    
    if not rows:
        print("üìä –ü–æ–º–∏–ª–æ–∫ –ø–æ–∫–∏ –Ω–µ–º–∞—î")
        return
    
    print(f"\nüìä –û–°–¢–ê–ù–ù–Ü –ü–û–ú–ò–õ–ö–ò (–≤—Å—å–æ–≥–æ –≤ –ë–î: {total}):")
    print("=" * 100)
    
    for row in rows:
        print(f"\nüïí {row[1]}")
        print(f"   –ú–æ–¥–µ–ª—å: {row[2]}")
        print(f"   –°—Ç–∞—Ç—É—Å: {row[3]}")
        print(f"   –ß–∞—Å –≤—ñ–¥–∫–ª–∏–∫—É: {row[4]}s")
        print(f"   –ó–∞–ø–∏—Ç: {row[5]}")
        if row[6]:
            print(f"   –í—ñ–¥–ø–æ–≤—ñ–¥—å: {row[6]}")
        print(f"   –ü–æ–º–∏–ª–∫–∞: {row[7]}")


def show_stats():
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–º–∏–ª–æ–∫"""
    if not DB_FILE.exists():
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞.")
        return
    
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    
    print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–ú–ò–õ–û–ö:")
    print("=" * 100)
    
    for model in MODELS:
        c.execute('SELECT COUNT(*) FROM logs WHERE model = ?', (model,))
        total = c.fetchone()[0]
        
        c.execute('SELECT COUNT(*) FROM logs WHERE model = ? AND error_message LIKE ?', 
                  (model, '%overload%'))
        overloads = c.fetchone()[0]
        
        c.execute('SELECT COUNT(*) FROM logs WHERE model = ? AND status_code = 429', (model,))
        rate_limits = c.fetchone()[0]
        
        print(f"\n{model}:")
        print(f"  –í—Å—å–æ–≥–æ –ø–æ–º–∏–ª–æ–∫: {total}")
        print(f"  –ü–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω—å (overload): {overloads}")
        print(f"  Rate Limits (429): {rate_limits}")
        
        if total > 0:
            c.execute('''
                SELECT timestamp, status_code, error_message 
                FROM logs 
                WHERE model = ? 
                ORDER BY timestamp DESC 
                LIMIT 3
            ''', (model,))
            recent = c.fetchall()
            print(f"  –û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–º–∏–ª–∫–∏:")
            for r in recent:
                print(f"    - {r[0]}: {r[1]} - {r[2][:60]}...")
    
    conn.close()


def main():
    """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    init_db()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É API Anthropic")
    print(f"üìä –ú–æ–¥–µ–ª—ñ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {len(MODELS)} —à—Ç—É–∫")
    print(f"‚è∞ –Ü–Ω—Ç–µ—Ä–≤–∞–ª: –∫–æ–∂–Ω—ñ {INTERVAL // 60} —Ö–≤–∏–ª–∏–Ω")
    print(f"üíæ –õ–æ–≥–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤: {DB_FILE}")
    print(f"üîë API Key: {'–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' if API_KEY != 'your-api-key-here' else '–ù–ï –í–°–¢–ê–ù–û–í–õ–ï–ù–û!'}")
    print("-" * 100)
    
    if API_KEY == "your-api-key-here":
        print("\n‚ö†Ô∏è  –£–í–ê–ì–ê! –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å ANTHROPIC_API_KEY —É –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")
        print("–ü—Ä–∏–∫–ª–∞–¥: export ANTHROPIC_API_KEY='your-key-here'\n")
        return
    
    try:
        iteration = 0
        while True:
            iteration += 1
            print(f"\nüîÑ –Ü—Ç–µ—Ä–∞—Ü—ñ—è #{iteration} - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            print("-" * 100)
            
            for model in MODELS:
                send_message(model)
                time.sleep(2)  # –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
            
            print(f"\n‚è≥ –°–ø–ª—é {INTERVAL // 60} —Ö–≤–∏–ª–∏–Ω –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏...")
            time.sleep(INTERVAL)
            
    except KeyboardInterrupt:
        print("\n\nüõë –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        print(f"üìä –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: python {__file__} stats")


if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == "errors":
            show_errors()
        elif command == "stats":
            show_stats()
        else:
            print("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:")
            print("  python monitor_anthropic.py         # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥")
            print("  python monitor_anthropic.py errors  # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–º–∏–ª–∫–∏")
            print("  python monitor_anthropic.py stats   # –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    else:
        main()
